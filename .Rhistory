plot(x,y)
y = 3*x^2 + 10 + 10*rnorm(10)
plot(x,y)
lines(x,z)
nls(y ~ a * x + b, start=list(a=2, b=8))
nls(y ~ a * x^2 + b, start=list(a=2, b=8))
res = nls(y ~ a * x^2 + b, start=list(a=2, b=8))
res
str(res)
coefficients(res)
coefficient(res)
coeff(res)
coefficients(res)
zz = coefficients(res)[1] * x^2 + coefficients(res)[2]
lines(x,zz, col="blue")
x = 10:10000
y = 1 - plnorm(x, meanlog=10.5, sdlog=7.5)
plot(x,y)
y = 1 - plnorm(x, meanlog=10.5, sdlog=8)
plot(x,y)
y = 1 - plnorm(x)
plot(x,y)
plot(x,y, type="line")
y = 1 - plnorm(x, meanlog=10.5, sdlog=8)
plot(x,y, type="line")
x = 1:10000
y = 1 - plnorm(x, meanlog=10.5, sdlog=8)
plot(x,y, type="line")
plot(x,y, type="l")
?pnorm
y = 1 - plnorm(x, meanlog=10.5, sdlog=9)
plot(x,y, type="l")
nls(y ~ 1 - plnorm(x, meanlog=a, sdlog=b), start=list(a=12, b=10))
nls(y ~ 1 - plnorm(x, meanlog=a, sdlog=b), start=list(a=11, b=9))
x = 1:10000
y = 1 - plnorm(x, meanlog=10.5, sdlog=9)
nls(y ~ 1 - plnorm(x, meanlog=a, sdlog=b), start=list(a=10.5, b=9))
y = 1 - plnorm(x, meanlog=10.5, sdlog=9)
plot(x,y, type="l")
nls(y ~ 1 - plnorm(x, meanlog=a, sdlog=b), start=list(a=10.5, b=9))
x = 1:1000
y = 1 - plnorm(x, meanlog=10.5, sdlog=9)
plot(x,y, type="l")
nls(y ~ 1 - plnorm(x, meanlog=a, sdlog=b), start=list(a=10.5, b=9))
x = seq(1, 100000, length.out=150)
y = 1 - plnorm(x, meanlog=10.5, sdlog=9)
plot(x,y, type="l")
y = 1 - plnorm(x, meanlog=9.5, sdlog=5)
plot(x,y, type="l")
y = 1 - plnorm(x, meanlog=9.5, sdlog=11)
plot(x,y, type="l")
y = 1 - qlnorm(x, meanlog=9.5, sdlog=11)
y = 1 - plnorm(x, meanlog=11, sdlog=8)
plot(x,y, type="l")
nlm(y - 1 - plnorm(x, meanlog=a, sdlog=b), p=list(a=10.5, b=9))
?optim
optim(c(11,9), fr)
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
y - (1 - plnorm(x, meanlog=x1, sdlog=x2)
}
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
y - (1 - plnorm(x, meanlog=x1, sdlog=x2)
}
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
y - (1 - plnorm(x, meanlog=x1, sdlog=x2))
}
optim(c(11,9), fr)
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
optim(c(-1.2,1), fr)
set.seed(1)
A <- runif(100)
B <- runif(100)
C <- runif(100)
# these are your x and y to optimize
pars <- c(x=1,y=1)
OptPars <- function(pars,A,B,C){
D <- A*pars[1]+B*pars[2]
-cor(C,D)
}
# optim is one of many R-ish ways to do Excel's solver
# it minimizes by default (though you can tell it not to)
# and that's why I told it to take -cor()
optim(pars,OptPars,A=A,B=B,C=C)
pars
test = c(15000, 15253, 15600, 19800)
arrondi <- function(x, palier=500){
round(2*palier*x, 0)/(2*palier)
}
arrondi(test)
arrondi <- function(x, palier=500){
round(x/(2*palier), 0) * 2*palier
}
arrondi(test)
arrondi <- function(x, palier=500){
round(x/(palier), 0) * palier
}
arrondi(test)
test
test = c(15000, 15253, 15600, 19800)
arrondi <- function(x, palier=250){
round(x/palier, 0) * palier
}
arrondi(test)
x = c("a","b","c")
x = c("a","b","c")
y = c("aa","bb")
z = c("e","v", "d")
table(x,y,z)
res = expand.grid(x, y, z)
res
install.packages("reshape2")
mon.data = data.frame(x=c(1,5,7), y=c(2,4,6), z=c("lab 1","lab 2","lab 3"))
plot(mon.data$x, mon.data$y)
text(mon.data$x, mon.data$y, label=mon.data$z, pos=1)
text(mon.data$x, mon.data$y, label=mon.data$z, pos=c(3,1,1))
plot(mon.data$x, mon.data$y, xlim=c(0,7), xlim=c(0,10))
plot(mon.data$x, mon.data$y, xlim=c(0,7), ylim=c(0,7))
text(mon.data$x, mon.data$y, label=mon.data$z, pos=1)
x = c("XYZ_RTE", "test_2_a")
sub("_"," ",x)
gsub("_"," ",x)
z2 = c("XYZ_RTE", "test_2_a")
gsub("_"," ",z2)
z1 = c("XYZ","test")
z2 = c("RTE", "2_a")
paste(z1, z2, sep=" ")
paste(z1, z2, sep="_^_")
library("XML")
install.packages("XML")
library("XML")
u = "http://en.wikipedia.org/wiki/List_of_countries_by_population"
tables = readHTMLTable(u)
names(tables)
tables[[2]]
tmp = tables[[2]]
doc = htmlParse(u)
tableNodes = getNodeSet(doc, "//table")
tb = readHTMLTable(tableNodes[[2]])
tryAsInteger = function(node) {
val = xmlValue(node)
ans = as.integer(gsub(",", "", val))
if(is.na(ans))
val
else
ans
}
tb
tb = readHTMLTable(tableNodes[[2]], elFun = tryAsInteger)
tb = readHTMLTable(tableNodes[[2]], elFun = tryAsInteger,
colClasses = c("character", rep("integer", 9)))
zz =
readHTMLTable("http://www.inflationdata.com/Inflation/Consumer_Price_Index/HistoricalCPI.aspx")
tb
tb = readHTMLTable(tableNodes[[2]], elFun = tryAsInteger,
colClasses = c("character", rep("integer", 9)))
zz =
readHTMLTable("http://www.inflationdata.com/Inflation/Consumer_Price_Index/HistoricalCPI.aspx")
if(any(i <- sapply(zz, function(x) if(is.null(x)) 0 else ncol(x)) == 14)) {
# guard against the structure of the page changing.
zz = zz[[which(i)[1]]]  # 4th table
# convert columns to numeric.  Could use colClasses in the call to readHTMLTable()
zz[-1] = lapply(zz[-1], function(x) as.numeric(gsub(".* ", "", as.character(x))))
matplot(1:12, t(zz[-c(1, 14)]), type = "l")
}
doc <- "http://www.nber.org/cycles/cyclesmain.html"
# The  main table is the second one because it's embedded in the page table.
table <- getNodeSet(htmlParse(doc),"//table") [[2]]
xt <- readHTMLTable(table,
header = c("peak","trough","contraction",
"expansion","trough2trough","peak2peak"),
colClasses = c("character","character","character",
"character","character","character"),
trim = TRUE, stringsAsFactors = FALSE
)
str(tb)
View(tb)
names(tables)
tables[[2]]
tables[[1]]
test = tables[[1]]
View(test)
str(test)
u = "http://www.reliabilityindex.com/reliability/search/118"
u = "http://www.reliabilityindex.com/reliability/search/118"
tables = readHTMLTable(u)
test = tables[[1]]
View(test)
names(tables)
test2 = tables[[2]]
View(test2)
test3 = tables[[3]] # le résumé un peu plus long
test3 = tables[[4]] # le résumé un peu plus long
View(test3)
table.listview = tables$table_list_view
View(table.listview)
doc = htmlParse(u)
H2Nodes = getNodeSet(doc, "//h2")
H2Nodes
H2Nodes = getNodeSet(doc, "//h2[@car_name]")
H2Nodes
H2Nodes = getNodeSet(doc, "//h2[@id:car_name]")
H2Nodes = getNodeSet(doc, "//h2[@id:'car_name']")
H2Nodes = getNodeSet(doc, "//h2[@id='car_name']")
H2Nodes
marque.veh = getNodeSet(H2Nodes, "//span")
H2Nodes = getNodeSet(doc, "//h2[@id='car_name']/span")
H2Nodes
str(H2Nodes[[1]])
res = xmlToDataFrame(H2Nodes[[1]])
values(H2Nodes[[1]])
xmlValues(H2Nodes[[1]])
xmlValue(H2Nodes[[1]])
marque.veh = xmlValue(H2Nodes[[1]])
H2Nodes = getNodeSet(doc, "//h2[@id='car_name']/span")
marque.veh = xmlValue(H2Nodes[[1]])
strsplit(marque.veh, split=" ")
H2Nodes = getNodeSet(doc, "//h2[@id='car_name']/span")
H2Nodes
YearNodes = getNodeSet(doc, "//h2[@id='car_name']/span[@id='selectYear'")
YearNodes = getNodeSet(doc, "//h2[@id='car_name']/span[@id='selectYear']")
YearNodes
YearNodes = getNodeSet(doc, "//h2[@id='car_name']/span[@id='selectYear']/select/option[@selected='selected']")
YearNodes
xmlValues(YearNodes)
xmlValue(YearNodes)
xmlValue(YearNodes[[1]])
doc = htmlParse(u)
carNodes = getNodeSet(doc, "//h2[@id='car_name']/span")
marque.veh = xmlValue(carNodes[[1]])
# strsplit(marque.veh, split=" ") # ne peut pas fonctionner table de correspondance obligatoire
YearNodes = getNodeSet(doc, "//h2[@id='car_name']/span[@id='selectYear']/select/option[@selected='selected']")
annee = xmlValue(YearNodes[[1]])
u = "http://www.reliabilityindex.com/reliability/search/118"
doc = htmlParse(u)
carNodes = getNodeSet(doc, "//h2[@id='car_name']/span")
marque.veh = xmlValue(carNodes[[1]])
# strsplit(marque.veh, split=" ") # ne peut pas fonctionner table de correspondance obligatoire
YearNodes = getNodeSet(doc, "//h2[@id='car_name']/span[@id='selectYear']/select/option[@selected='selected']")
annee = xmlValue(YearNodes[[1]])
# 2- Les données ----------------------------------------------------
tables = readHTMLTable(u)
table.reliability = tables[[4]] # le résumé std
# Le complément "table list view"
table.listview = tables$table_list_view
View(table.listview)
View(table.listview)
View(table.reliability)
str(table.reliability)
table.reliability
makeNodes = getNodeSet(doc, "//div[@id='searchBox']")
library("XML")
url.home = "http://www.reliabilityindex.com"
doc.home = htmlParse(url.home)
makeNodes = getNodeSet(doc, "//div[@id='searchBox']")
makeNodes = getNodeSet(doc.home, "//div[@id='searchBox']")
doc.home
makeNodes
makeNodes = getNodeSet(doc.home, "//div[@id='searchBox']/select[@id='make'])
makeNodes = getNodeSet(doc.home, "//div[@id='searchBox']/select[@id='make']")
makeNodes
makeNodes = getNodeSet(doc.home, "//div[@id='searchBox']/div/select[@id='make']")
makeNodes
makeNodes = getNodeSet(doc.home, "//div[@id='searchBox']/div/select[@id='make']/option")
makeNodes
res = xmlValue(makeNodes)
res = lapply(makeNodes, xmlValue)
res
res = sapply(makeNodes, xmlValue)
res
res = sapply(makeNodes, xmlValue)[-1]
res
marques = sapply(makeNodes, xmlValue)[-1] # les marques (on retire le titre qui est le 1er élément)
marques
library("XML")
id = 2
url.id = paste("http://www.reliabilityindex.com/reliability/search/", id, sep="")
doc.id = htmlParse(url.id)
carNodes = getNodeSet(doc, "//h2[@id='car_name']/span")
carNodes = getNodeSet(doc.id, "//h2[@id='car_name']/span")
marque.modele = xmlValue(carNodes[[1]])
YearNodes = getNodeSet(doc, "//h2[@id='car_name']/span[@id='selectYear']/select/option[@selected='selected']")
YearNodes = getNodeSet(doc.id, "//h2[@id='car_name']/span[@id='selectYear']/select/option[@selected='selected']")
millesime = xmlValue(YearNodes[[1]])
tables = readHTMLTable(url.id)
table.reliability = tables[[4]] # Le tableau reliability ratings
table.listview = tables$table_list_view # Le complément "table list view"
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year")
plot(M)
cat(paste(M$html, collapse="\n"), file="temp.html")
install.packages("C:/Users/Matthieu/Downloads/abrem_0.1.8.zip", repos = NULL)
library(abrem)
install.packages(pivotals)
install.packages("pivotals")
install.packages("pivotals", repos="http://R-Forge.R-project.org")
library(abrem)
da1 <- Abrem(rweibull(5,3,1000))
library(abrem)
install.packages("debias", repos="http://R-Forge.R-project.org")
library(abrem)
da1 <- Abrem(rweibull(5,3,1000))
da1 <- abrem.fit(da1,dist="weibull",  method.fit=c("rr","xony"),pch=3)
da1 <- abrem.fit(da1,dist="weibull",  method.fit="mle",col="red1")
da1 <- abrem.fit(da1,dist="weibull",  method.fit="mle-rba",col="orange",lty=2)
da1 <- abrem.fit(da1,dist="lognormal",method.fit=c("rr","xony"),
col="steelblue3",pch=8)
da1 <- abrem.conf(da1)
plot(da1,col="black") # plot all in black
X11()
plot(da1,col="black") # plot all in black
plot(da1) # plot with specified colors
x = 1:10000
y1 = dnorm(x, 20, 2)
y2 = dnorm(x, 30, 3)
plot(x,y1)
x = 1:100
y1 = dnorm(x, 20, 2)
y2 = dnorm(x, 30, 3)
plot(x,y1)
plot(x,y1, type="l")
x = 1:60
y1 = dnorm(x, 20, 2)
y2 = dnorm(x, 30, 3)
plot(x,y1, type="l")
plot(x,y1, type="l", col="blue")
lines(x, y2, col="red")
y3 = 0.3 * y1 + 0.7 * y2
lines(x, y3, col="purple")
N = 10000
yy1 = rnorm(N, 20, 2)
yy2 = rnorm(N, 30, 3)
yy1 = rnorm(N, 20, 2)
yy2 = rnorm(N, 30, 3)
yy3 = 0.3 * yy1 + 0.7 * yy2
plot(density(yy1), type="l", col="blue")
lines(density(yy2), col="red")
lines(density(yy3), col="purple")
plot(x,y1, type="l", col="blue")
lines(x, y2, col="red")
lines(x, y3, col="purple")
rnormmix <- function(n, prob1=1, mean1=0, sd1=1, mean2=mean1, sd2=sd1){
n1 = rbinom(1, n, prob=prob1)
x1 = rnorm(n1, mean = mean1, sd = sd1)
x2 = rnorm(n - n1, mean = mean2, sd = sd2)
return(c(x1,x2))
}
rnormmix(1)
rnormmix(10)
rnormmix(10000, prob1=0.3, mean1=20, sd1=2, mean1=30, sd1=3)
rnormmix(10000, prob1=0.3, mean1=20, sd1=2, mean2=30, sd2=3)
res = rnormmix(10000, prob1=0.3, mean1=20, sd1=2, mean2=30, sd2=3)
plot(res)
plot(density(res))
res = rnormmix(10000, prob1=0, mean1=20, sd1=2, mean2=30, sd2=3)
plot(density(res))
res = rnormmix(10000, prob1=1, mean1=20, sd1=2, mean2=30, sd2=3)
plot(density(res))
res = rnormmix(100000, prob1=1, mean1=20, sd1=2, mean2=30, sd2=3)
plot(density(res))
res = rnormmix(1000000, prob1=1, mean1=20, sd1=2, mean2=30, sd2=3)
plot(density(res))
rlnormmix <- function(n, prob1=1, mean1=0, sd1=1, mean2=mean1, sd2=sd1){
n1 = rbinom(1, n, prob=prob1)
x1 = rlnorm(n1, meanlog = meanlog1, sdlog = sdlog1)
x2 = rlnorm(n - n1, meanlog = meanlog2, sdlog = sdlog2)
return(c(x1,x2))
}
x1.meanlog = 9.5
x1.sdlog = 0.7
x2.meanlog = 9.3
x2.sdlog = 0.8
km = 1:60000
dx1 = dlnorm(km, x1.meanlog, x1.sdlog)
plot(km, dx1)
plot(km, dx1, type="l")
dx2 = dlnorm(km, x2.meanlog, x2.sdlog)
x2.meanlog = 9.8
x2.sdlog = 0.8
km = 1:60000
dx1 = dlnorm(km, x1.meanlog, x1.sdlog)
dx2 = dlnorm(km, x2.meanlog, x2.sdlog)
plot(km, dx1, type="l")
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
x2.meanlog = 10.5
x2.sdlog = 0.8
km = 1:60000
dx1 = dlnorm(km, x1.meanlog, x1.sdlog)
dx2 = dlnorm(km, x2.meanlog, x2.sdlog)
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
x1.meanlog = 9.5
x1.sdlog = 0.7
x2.meanlog = 10.5
x2.sdlog = 0.9
km = 1:60000
dx1 = dlnorm(km, x1.meanlog, x1.sdlog)
dx2 = dlnorm(km, x2.meanlog, x2.sdlog)
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
x2.sdlog = 0.4
dx2 = dlnorm(km, x2.meanlog, x2.sdlog)
lines(km, dx2, col="red")
x2.sdlog = 0.3
dx2 = dlnorm(km, x2.meanlog, x2.sdlog)
lines(km, dx2, col="red")
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
rlnormmix <- function(n, prob1=1, meanlog1=0, sdlog1=1, meanlog2=0, sdlog2=1){
n1 = rbinom(1, n, prob=prob1)
x1 = rlnorm(n1, meanlog = meanlog1, sdlog = sdlog1)
x2 = rlnorm(n - n1, meanlog = meanlog2, sdlog = sdlog2)
return(c(x1,x2))
}
x3.simul = rlnormmix(100000, prob1=0.5, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
lines(density(x3.simul), col="purple")
x3.simul = rlnormmix(1000000, prob1=0.5, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
lines(density(x3.simul), col="purple")
x3.simul = rlnormmix(1000000, prob1=0.8, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
lines(density(x3.simul), col="purple")
px1 = plnorm(km, x1.meanlog, x1.sdlog)
px2 = plnorm(km, x2.meanlog, x2.sdlog)
plot(km, 1-px1, type="l", col="blue")
lines(km, 1-px2, col="red")
lines(ecdf(x3.simul), col="purple")
x3.simul = rlnormmix(10000, prob1=0.8, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
plot(km, dx1, type="l", col="blue")
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
lines(density(x3.simul), col="purple")
x3.simul = rlnormmix(10000, prob1=0.3, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
lines(density(x3.simul), col="purple")
px1 = plnorm(km, x1.meanlog, x1.sdlog)
px2 = plnorm(km, x2.meanlog, x2.sdlog)
x3.ecdf = ecdf(x3.simul)
plot(km, 1-px1, type="l", col="blue")
lines(km, 1-px2, col="red")
lines(1-x3.ecdf, col="purple")
lines(x3.ecdf, col="purple")
x3.ecdf
sort(x3.ecdf)
str(x3.ecdf)
library(MASS)
fitdistr(x3.simul, "lognormal")
x3.simul = rlnormmix(10000, prob1=1, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
fitdistr(x3.simul, "lognormal")
x3.simul = rlnormmix(10000, prob1=0, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
fitdistr(x3.simul, "lognormal")
x3.simul = rlnormmix(10000, prob1=0.5, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
fitdistr(x3.simul, "lognormal")
dx3 = alpha * dx1 + (1-alpha) * dx2
alpha = 0.3
dx3 = alpha * dx1 + (1-alpha) * dx2
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
lines(km, dx3, col="gray")
x3.simul = rlnormmix(10000, prob1=alpha, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
fitdistr(x3.simul, "lognormal")
lines(density(x3.simul), col="purple")
x3.ecdf = ecdf(x3.simul)
x3.ecdf(2)
x3.ecdf = ecdf(x3.simul)
plot(km, 1-px1, type="l", col="blue")
lines(km, 1-px2, col="red")
lines(km, 1- x3.ecdf(km), col="purple")
dx1 = dlnorm(km, x1.meanlog, x1.sdlog)
dx2 = dlnorm(km, x2.meanlog, x2.sdlog)
dx3 = alpha * dx1 + (1-alpha) * dx2
plot(km, dx1, type="l", col="blue")
lines(km, dx2, col="red")
lines(km, dx3, col="gray")
# Simulation
x3.simul = rlnormmix(10000, prob1=alpha, meanlog1=x1.meanlog, sdlog1=x1.sdlog,
meanlog2=x2.meanlog, sdlog2=x2.sdlog)
lines(density(x3.simul), col="purple")
fitdistr(x3.simul, "lognormal")
px1 = plnorm(km, x1.meanlog, x1.sdlog)
px2 = plnorm(km, x2.meanlog, x2.sdlog)
px3 = alpha * px1 + (1-alpha) * px2
x3.ecdf = ecdf(x3.simul)
plot(km, 1-px1, type="l", col="blue", "LR (1-fdr)")
lines(km, 1-px2, col="red")
lines(km, 1-px3, col="gray")
lines(km, 1- x3.ecdf(km), col="purple")
plot(km, 1-px1, type="l", col="blue", main="LR (1-fdr)")
lines(km, 1-px2, col="red")
lines(km, 1-px3, col="gray")
lines(km, 1- x3.ecdf(km), col="purple")
setwd("D:/TEST/shiny")
library("shiny")
runApp("rCharts")
runApp("rChartsNVD3")
